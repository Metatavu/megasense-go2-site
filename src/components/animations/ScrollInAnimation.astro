---
type Props = {
  className?: string;
};

const { className } = Astro.props;

---

<scroll-in-animation
  class="opacity-0 motion-reduce:opacity-100"
  class:list={[className]}
>
  <slot/>
</scroll-in-animation>

<script>
  class ScrollInAnimation extends HTMLElement {
    constructor() {
      super();
      /**
       * Script that detects how much of an element is visible on screen and changes its opacity accordingly.
       */
      const scrollInDetector = new IntersectionObserver((elements) => {
        elements.forEach((element) => {
          if (element.isIntersecting) {
            const htmlElement = element.target as HTMLElement;

            htmlElement.style.setProperty("opacity", element.intersectionRatio.toString());
            htmlElement.style.setProperty("transform", `translate3d(0, ${32 - element.intersectionRatio * 32}px, 0)`);
          }
        });
      }, {
        rootMargin: "-15% 0px -15% 0px",
        threshold: [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1],
      });

      if (window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === false) {
        scrollInDetector.observe(this);
      }
    }
  }

customElements.define('scroll-in-animation', ScrollInAnimation);

</script>